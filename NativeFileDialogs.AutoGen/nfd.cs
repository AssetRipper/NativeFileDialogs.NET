// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace NativeFileDialogs.AutoGen
{
    public enum Result
    {
        /// <summary>Programmatic error</summary>
        Error = 0,
        /// <summary>User pressed okay, or successful return</summary>
        Okay = 1,
        /// <summary>User pressed cancel</summary>
        Cancel = 2
    }

    public enum WINDOW_HANDLE_TYPE
    {
        WINDOW_HANDLE_TYPE_UNSET = 0,
        WINDOW_HANDLE_TYPE_WINDOWS = 1,
        WINDOW_HANDLE_TYPE_COCOA = 2,
        WINDOW_HANDLE_TYPE_X11 = 3
    }

    public unsafe partial class PathSetEnumerator : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr ptr;

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "??0nfdpathsetenum_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.PathSetEnumerator> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.PathSetEnumerator>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NativeFileDialogs.AutoGen.PathSetEnumerator managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NativeFileDialogs.AutoGen.PathSetEnumerator managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static PathSetEnumerator __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new PathSetEnumerator(native.ToPointer(), skipVTables);
        }

        internal static PathSetEnumerator __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (PathSetEnumerator)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static PathSetEnumerator __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new PathSetEnumerator(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PathSetEnumerator(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected PathSetEnumerator(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public PathSetEnumerator()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.PathSetEnumerator.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public PathSetEnumerator(global::NativeFileDialogs.AutoGen.PathSetEnumerator _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.PathSetEnumerator.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NativeFileDialogs.AutoGen.PathSetEnumerator.__Internal*) __Instance) = *((global::NativeFileDialogs.AutoGen.PathSetEnumerator.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public __IntPtr Ptr
        {
            get
            {
                return ((__Internal*)__Instance)->ptr;
            }

            set
            {
                ((__Internal*)__Instance)->ptr = (__IntPtr) value;
            }
        }
    }

    public unsafe partial class FilterItemU8 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr name;
            internal __IntPtr spec;

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "??0nfdu8filteritem_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.FilterItemU8> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.FilterItemU8>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NativeFileDialogs.AutoGen.FilterItemU8 managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NativeFileDialogs.AutoGen.FilterItemU8 managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __name_OwnsNativeMemory = false;
        private bool __spec_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static FilterItemU8 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new FilterItemU8(native.ToPointer(), skipVTables);
        }

        internal static FilterItemU8 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (FilterItemU8)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static FilterItemU8 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FilterItemU8(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FilterItemU8(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected FilterItemU8(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FilterItemU8()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public FilterItemU8(global::NativeFileDialogs.AutoGen.FilterItemU8 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal*) __Instance) = *((global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal*) _0.__Instance);
            if (_0.__name_OwnsNativeMemory)
                this.Name = _0.Name;
            if (_0.__spec_OwnsNativeMemory)
                this.Spec = _0.Spec;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__name_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->name);
            if (__spec_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->spec);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string Name
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->name);
            }

            set
            {
                if (__name_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->name);
                __name_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->name = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->name = (__IntPtr) __bytePtr0;
            }
        }

        public string Spec
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->spec);
            }

            set
            {
                if (__spec_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->spec);
                __spec_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->spec = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->spec = (__IntPtr) __bytePtr0;
            }
        }
    }

    [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
    public unsafe partial class FilterItemN : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr name;
            internal __IntPtr spec;

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "??0nfdnfilteritem_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.FilterItemN> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.FilterItemN>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NativeFileDialogs.AutoGen.FilterItemN managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NativeFileDialogs.AutoGen.FilterItemN managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __name_OwnsNativeMemory = false;
        private bool __spec_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static FilterItemN __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new FilterItemN(native.ToPointer(), skipVTables);
        }

        internal static FilterItemN __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (FilterItemN)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static FilterItemN __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FilterItemN(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FilterItemN(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected FilterItemN(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FilterItemN()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.FilterItemN.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public FilterItemN(global::NativeFileDialogs.AutoGen.FilterItemN _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.FilterItemN.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NativeFileDialogs.AutoGen.FilterItemN.__Internal*) __Instance) = *((global::NativeFileDialogs.AutoGen.FilterItemN.__Internal*) _0.__Instance);
            if (_0.__name_OwnsNativeMemory)
                this.Name = _0.Name;
            if (_0.__spec_OwnsNativeMemory)
                this.Spec = _0.Spec;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__name_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->name);
            if (__spec_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->spec);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string Name
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.Unicode, ((__Internal*)__Instance)->name);
            }

            set
            {
                if (__name_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->name);
                __name_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->name = global::System.IntPtr.Zero;
                    return;
                }
                var __bytePtr0 = Marshal.StringToHGlobalUni(value);
                ((__Internal*)__Instance)->name = (__IntPtr) __bytePtr0;
            }
        }

        public string Spec
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.Unicode, ((__Internal*)__Instance)->spec);
            }

            set
            {
                if (__spec_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->spec);
                __spec_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->spec = global::System.IntPtr.Zero;
                    return;
                }
                var __bytePtr0 = Marshal.StringToHGlobalUni(value);
                ((__Internal*)__Instance)->spec = (__IntPtr) __bytePtr0;
            }
        }
    }

    public unsafe partial class WindowHandle : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal ulong type;
            internal __IntPtr handle;

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "??0nfdwindowhandle_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.WindowHandle> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.WindowHandle>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NativeFileDialogs.AutoGen.WindowHandle managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NativeFileDialogs.AutoGen.WindowHandle managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static WindowHandle __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new WindowHandle(native.ToPointer(), skipVTables);
        }

        internal static WindowHandle __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (WindowHandle)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static WindowHandle __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new WindowHandle(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private WindowHandle(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected WindowHandle(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public WindowHandle()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.WindowHandle.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public WindowHandle(global::NativeFileDialogs.AutoGen.WindowHandle _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.WindowHandle.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NativeFileDialogs.AutoGen.WindowHandle.__Internal*) __Instance) = *((global::NativeFileDialogs.AutoGen.WindowHandle.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Type
        {
            get
            {
                return ((__Internal*)__Instance)->type;
            }

            set
            {
                ((__Internal*)__Instance)->type = value;
            }
        }

        public __IntPtr Handle
        {
            get
            {
                return ((__Internal*)__Instance)->handle;
            }

            set
            {
                ((__Internal*)__Instance)->handle = (__IntPtr) value;
            }
        }
    }

    public unsafe partial class OpenDialogArgsU8 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 40)]
        public partial struct __Internal
        {
            internal __IntPtr filterList;
            internal uint filterCount;
            internal __IntPtr defaultPath;
            internal global::NativeFileDialogs.AutoGen.WindowHandle.__Internal parentWindow;

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "??0nfdopendialogu8args_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.OpenDialogArgsU8> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.OpenDialogArgsU8>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NativeFileDialogs.AutoGen.OpenDialogArgsU8 managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NativeFileDialogs.AutoGen.OpenDialogArgsU8 managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __defaultPath_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static OpenDialogArgsU8 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new OpenDialogArgsU8(native.ToPointer(), skipVTables);
        }

        internal static OpenDialogArgsU8 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (OpenDialogArgsU8)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static OpenDialogArgsU8 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new OpenDialogArgsU8(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OpenDialogArgsU8(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected OpenDialogArgsU8(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public OpenDialogArgsU8()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.OpenDialogArgsU8.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public OpenDialogArgsU8(global::NativeFileDialogs.AutoGen.OpenDialogArgsU8 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.OpenDialogArgsU8.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NativeFileDialogs.AutoGen.OpenDialogArgsU8.__Internal*) __Instance) = *((global::NativeFileDialogs.AutoGen.OpenDialogArgsU8.__Internal*) _0.__Instance);
            if (_0.__defaultPath_OwnsNativeMemory)
                this.DefaultPath = _0.DefaultPath;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__defaultPath_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultPath);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NativeFileDialogs.AutoGen.FilterItemU8 FilterList
        {
            get
            {
                var __result0 = global::NativeFileDialogs.AutoGen.FilterItemU8.__GetOrCreateInstance(((__Internal*)__Instance)->filterList, false);
                return __result0;
            }
        }

        public uint FilterCount
        {
            get
            {
                return ((__Internal*)__Instance)->filterCount;
            }

            set
            {
                ((__Internal*)__Instance)->filterCount = value;
            }
        }

        public string DefaultPath
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->defaultPath);
            }

            set
            {
                if (__defaultPath_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultPath);
                __defaultPath_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->defaultPath = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->defaultPath = (__IntPtr) __bytePtr0;
            }
        }

        public global::NativeFileDialogs.AutoGen.WindowHandle ParentWindow
        {
            get
            {
                return global::NativeFileDialogs.AutoGen.WindowHandle.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->parentWindow));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->parentWindow = *(global::NativeFileDialogs.AutoGen.WindowHandle.__Internal*) value.__Instance;
            }
        }
    }

    [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
    public unsafe partial class OpenDialogArgsN : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 40)]
        public partial struct __Internal
        {
            internal __IntPtr filterList;
            internal uint filterCount;
            internal __IntPtr defaultPath;
            internal global::NativeFileDialogs.AutoGen.WindowHandle.__Internal parentWindow;

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "??0nfdopendialognargs_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.OpenDialogArgsN> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.OpenDialogArgsN>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NativeFileDialogs.AutoGen.OpenDialogArgsN managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NativeFileDialogs.AutoGen.OpenDialogArgsN managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __defaultPath_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static OpenDialogArgsN __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new OpenDialogArgsN(native.ToPointer(), skipVTables);
        }

        internal static OpenDialogArgsN __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (OpenDialogArgsN)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static OpenDialogArgsN __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new OpenDialogArgsN(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OpenDialogArgsN(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected OpenDialogArgsN(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public OpenDialogArgsN()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.OpenDialogArgsN.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public OpenDialogArgsN(global::NativeFileDialogs.AutoGen.OpenDialogArgsN _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.OpenDialogArgsN.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NativeFileDialogs.AutoGen.OpenDialogArgsN.__Internal*) __Instance) = *((global::NativeFileDialogs.AutoGen.OpenDialogArgsN.__Internal*) _0.__Instance);
            if (_0.__defaultPath_OwnsNativeMemory)
                this.DefaultPath = _0.DefaultPath;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__defaultPath_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultPath);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NativeFileDialogs.AutoGen.FilterItemN FilterList
        {
            get
            {
                var __result0 = global::NativeFileDialogs.AutoGen.FilterItemN.__GetOrCreateInstance(((__Internal*)__Instance)->filterList, false);
                return __result0;
            }
        }

        public uint FilterCount
        {
            get
            {
                return ((__Internal*)__Instance)->filterCount;
            }

            set
            {
                ((__Internal*)__Instance)->filterCount = value;
            }
        }

        public string DefaultPath
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.Unicode, ((__Internal*)__Instance)->defaultPath);
            }

            set
            {
                if (__defaultPath_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultPath);
                __defaultPath_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->defaultPath = global::System.IntPtr.Zero;
                    return;
                }
                var __bytePtr0 = Marshal.StringToHGlobalUni(value);
                ((__Internal*)__Instance)->defaultPath = (__IntPtr) __bytePtr0;
            }
        }

        public global::NativeFileDialogs.AutoGen.WindowHandle ParentWindow
        {
            get
            {
                return global::NativeFileDialogs.AutoGen.WindowHandle.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->parentWindow));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->parentWindow = *(global::NativeFileDialogs.AutoGen.WindowHandle.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class SaveDialogArgsU8 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal __IntPtr filterList;
            internal uint filterCount;
            internal __IntPtr defaultPath;
            internal __IntPtr defaultName;
            internal global::NativeFileDialogs.AutoGen.WindowHandle.__Internal parentWindow;

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "??0nfdsavedialogu8args_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.SaveDialogArgsU8> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.SaveDialogArgsU8>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NativeFileDialogs.AutoGen.SaveDialogArgsU8 managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NativeFileDialogs.AutoGen.SaveDialogArgsU8 managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __defaultPath_OwnsNativeMemory = false;
        private bool __defaultName_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static SaveDialogArgsU8 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SaveDialogArgsU8(native.ToPointer(), skipVTables);
        }

        internal static SaveDialogArgsU8 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SaveDialogArgsU8)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SaveDialogArgsU8 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SaveDialogArgsU8(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SaveDialogArgsU8(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SaveDialogArgsU8(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public SaveDialogArgsU8()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.SaveDialogArgsU8.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public SaveDialogArgsU8(global::NativeFileDialogs.AutoGen.SaveDialogArgsU8 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.SaveDialogArgsU8.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NativeFileDialogs.AutoGen.SaveDialogArgsU8.__Internal*) __Instance) = *((global::NativeFileDialogs.AutoGen.SaveDialogArgsU8.__Internal*) _0.__Instance);
            if (_0.__defaultPath_OwnsNativeMemory)
                this.DefaultPath = _0.DefaultPath;
            if (_0.__defaultName_OwnsNativeMemory)
                this.DefaultName = _0.DefaultName;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__defaultPath_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultPath);
            if (__defaultName_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultName);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NativeFileDialogs.AutoGen.FilterItemU8 FilterList
        {
            get
            {
                var __result0 = global::NativeFileDialogs.AutoGen.FilterItemU8.__GetOrCreateInstance(((__Internal*)__Instance)->filterList, false);
                return __result0;
            }
        }

        public uint FilterCount
        {
            get
            {
                return ((__Internal*)__Instance)->filterCount;
            }

            set
            {
                ((__Internal*)__Instance)->filterCount = value;
            }
        }

        public string DefaultPath
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->defaultPath);
            }

            set
            {
                if (__defaultPath_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultPath);
                __defaultPath_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->defaultPath = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->defaultPath = (__IntPtr) __bytePtr0;
            }
        }

        public string DefaultName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->defaultName);
            }

            set
            {
                if (__defaultName_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultName);
                __defaultName_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->defaultName = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->defaultName = (__IntPtr) __bytePtr0;
            }
        }

        public global::NativeFileDialogs.AutoGen.WindowHandle ParentWindow
        {
            get
            {
                return global::NativeFileDialogs.AutoGen.WindowHandle.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->parentWindow));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->parentWindow = *(global::NativeFileDialogs.AutoGen.WindowHandle.__Internal*) value.__Instance;
            }
        }
    }

    [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
    public unsafe partial class SaveDialogArgsN : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal __IntPtr filterList;
            internal uint filterCount;
            internal __IntPtr defaultPath;
            internal __IntPtr defaultName;
            internal global::NativeFileDialogs.AutoGen.WindowHandle.__Internal parentWindow;

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "??0nfdsavedialognargs_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.SaveDialogArgsN> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.SaveDialogArgsN>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NativeFileDialogs.AutoGen.SaveDialogArgsN managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NativeFileDialogs.AutoGen.SaveDialogArgsN managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __defaultPath_OwnsNativeMemory = false;
        private bool __defaultName_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static SaveDialogArgsN __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SaveDialogArgsN(native.ToPointer(), skipVTables);
        }

        internal static SaveDialogArgsN __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SaveDialogArgsN)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SaveDialogArgsN __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SaveDialogArgsN(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SaveDialogArgsN(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SaveDialogArgsN(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public SaveDialogArgsN()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.SaveDialogArgsN.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public SaveDialogArgsN(global::NativeFileDialogs.AutoGen.SaveDialogArgsN _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.SaveDialogArgsN.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NativeFileDialogs.AutoGen.SaveDialogArgsN.__Internal*) __Instance) = *((global::NativeFileDialogs.AutoGen.SaveDialogArgsN.__Internal*) _0.__Instance);
            if (_0.__defaultPath_OwnsNativeMemory)
                this.DefaultPath = _0.DefaultPath;
            if (_0.__defaultName_OwnsNativeMemory)
                this.DefaultName = _0.DefaultName;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__defaultPath_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultPath);
            if (__defaultName_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultName);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NativeFileDialogs.AutoGen.FilterItemN FilterList
        {
            get
            {
                var __result0 = global::NativeFileDialogs.AutoGen.FilterItemN.__GetOrCreateInstance(((__Internal*)__Instance)->filterList, false);
                return __result0;
            }
        }

        public uint FilterCount
        {
            get
            {
                return ((__Internal*)__Instance)->filterCount;
            }

            set
            {
                ((__Internal*)__Instance)->filterCount = value;
            }
        }

        public string DefaultPath
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.Unicode, ((__Internal*)__Instance)->defaultPath);
            }

            set
            {
                if (__defaultPath_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultPath);
                __defaultPath_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->defaultPath = global::System.IntPtr.Zero;
                    return;
                }
                var __bytePtr0 = Marshal.StringToHGlobalUni(value);
                ((__Internal*)__Instance)->defaultPath = (__IntPtr) __bytePtr0;
            }
        }

        public string DefaultName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.Unicode, ((__Internal*)__Instance)->defaultName);
            }

            set
            {
                if (__defaultName_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultName);
                __defaultName_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->defaultName = global::System.IntPtr.Zero;
                    return;
                }
                var __bytePtr0 = Marshal.StringToHGlobalUni(value);
                ((__Internal*)__Instance)->defaultName = (__IntPtr) __bytePtr0;
            }
        }

        public global::NativeFileDialogs.AutoGen.WindowHandle ParentWindow
        {
            get
            {
                return global::NativeFileDialogs.AutoGen.WindowHandle.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->parentWindow));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->parentWindow = *(global::NativeFileDialogs.AutoGen.WindowHandle.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class PickFolderArgsU8 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal __IntPtr defaultPath;
            internal global::NativeFileDialogs.AutoGen.WindowHandle.__Internal parentWindow;

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "??0nfdpickfolderu8args_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.PickFolderArgsU8> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.PickFolderArgsU8>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NativeFileDialogs.AutoGen.PickFolderArgsU8 managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NativeFileDialogs.AutoGen.PickFolderArgsU8 managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __defaultPath_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static PickFolderArgsU8 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new PickFolderArgsU8(native.ToPointer(), skipVTables);
        }

        internal static PickFolderArgsU8 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (PickFolderArgsU8)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static PickFolderArgsU8 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new PickFolderArgsU8(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PickFolderArgsU8(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected PickFolderArgsU8(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public PickFolderArgsU8()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.PickFolderArgsU8.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public PickFolderArgsU8(global::NativeFileDialogs.AutoGen.PickFolderArgsU8 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.PickFolderArgsU8.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NativeFileDialogs.AutoGen.PickFolderArgsU8.__Internal*) __Instance) = *((global::NativeFileDialogs.AutoGen.PickFolderArgsU8.__Internal*) _0.__Instance);
            if (_0.__defaultPath_OwnsNativeMemory)
                this.DefaultPath = _0.DefaultPath;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__defaultPath_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultPath);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string DefaultPath
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->defaultPath);
            }

            set
            {
                if (__defaultPath_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultPath);
                __defaultPath_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->defaultPath = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->defaultPath = (__IntPtr) __bytePtr0;
            }
        }

        public global::NativeFileDialogs.AutoGen.WindowHandle ParentWindow
        {
            get
            {
                return global::NativeFileDialogs.AutoGen.WindowHandle.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->parentWindow));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->parentWindow = *(global::NativeFileDialogs.AutoGen.WindowHandle.__Internal*) value.__Instance;
            }
        }
    }

    [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
    public unsafe partial class PickFolderArgsN : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal __IntPtr defaultPath;
            internal global::NativeFileDialogs.AutoGen.WindowHandle.__Internal parentWindow;

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "??0nfdpickfoldernargs_t@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.PickFolderArgsN> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeFileDialogs.AutoGen.PickFolderArgsN>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::NativeFileDialogs.AutoGen.PickFolderArgsN managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NativeFileDialogs.AutoGen.PickFolderArgsN managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __defaultPath_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static PickFolderArgsN __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new PickFolderArgsN(native.ToPointer(), skipVTables);
        }

        internal static PickFolderArgsN __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (PickFolderArgsN)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static PickFolderArgsN __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new PickFolderArgsN(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PickFolderArgsN(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected PickFolderArgsN(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public PickFolderArgsN()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.PickFolderArgsN.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public PickFolderArgsN(global::NativeFileDialogs.AutoGen.PickFolderArgsN _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeFileDialogs.AutoGen.PickFolderArgsN.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::NativeFileDialogs.AutoGen.PickFolderArgsN.__Internal*) __Instance) = *((global::NativeFileDialogs.AutoGen.PickFolderArgsN.__Internal*) _0.__Instance);
            if (_0.__defaultPath_OwnsNativeMemory)
                this.DefaultPath = _0.DefaultPath;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__defaultPath_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultPath);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string DefaultPath
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.Unicode, ((__Internal*)__Instance)->defaultPath);
            }

            set
            {
                if (__defaultPath_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->defaultPath);
                __defaultPath_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->defaultPath = global::System.IntPtr.Zero;
                    return;
                }
                var __bytePtr0 = Marshal.StringToHGlobalUni(value);
                ((__Internal*)__Instance)->defaultPath = (__IntPtr) __bytePtr0;
            }
        }

        public global::NativeFileDialogs.AutoGen.WindowHandle ParentWindow
        {
            get
            {
                return global::NativeFileDialogs.AutoGen.WindowHandle.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->parentWindow));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->parentWindow = *(global::NativeFileDialogs.AutoGen.WindowHandle.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class nfd
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_FreePathN", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FreePathN(char* filePath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_FreePathU8", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FreePathU8(sbyte* filePath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_Init", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result Init();

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_Quit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Quit();

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_OpenDialogN", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result OpenDialogN(char** outPath, global::NativeFileDialogs.AutoGen.FilterItemN.__Internal* filterList, uint filterCount, [MarshalAs(UnmanagedType.LPWStr)] string defaultPath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_OpenDialogU8", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result OpenDialogU8(sbyte** outPath, global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal* filterList, uint filterCount, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string defaultPath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_OpenDialogN_With", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result OpenDialogWithN(char** outPath, __IntPtr args);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_OpenDialogU8_With", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result OpenDialogWithU8(sbyte** outPath, __IntPtr args);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_OpenDialogMultipleN", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result OpenDialogMultipleN(__IntPtr* outPaths, global::NativeFileDialogs.AutoGen.FilterItemN.__Internal* filterList, uint filterCount, [MarshalAs(UnmanagedType.LPWStr)] string defaultPath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_OpenDialogMultipleU8", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result OpenDialogMultipleU8(__IntPtr* outPaths, global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal* filterList, uint filterCount, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string defaultPath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_OpenDialogMultipleN_With", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result OpenDialogMultipleWithN(__IntPtr* outPaths, __IntPtr args);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_OpenDialogMultipleU8_With", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result OpenDialogMultipleWithU8(__IntPtr* outPaths, __IntPtr args);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_SaveDialogN", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result SaveDialogN(char** outPath, global::NativeFileDialogs.AutoGen.FilterItemN.__Internal* filterList, uint filterCount, [MarshalAs(UnmanagedType.LPWStr)] string defaultPath, [MarshalAs(UnmanagedType.LPWStr)] string defaultName);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_SaveDialogU8", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result SaveDialogU8(sbyte** outPath, global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal* filterList, uint filterCount, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string defaultPath, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string defaultName);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_SaveDialogN_With", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result SaveDialogWithN(char** outPath, __IntPtr args);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_SaveDialogU8_With", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result SaveDialogWithU8(sbyte** outPath, __IntPtr args);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PickFolderN", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result PickFolderN(char** outPath, [MarshalAs(UnmanagedType.LPWStr)] string defaultPath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PickFolderU8", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result PickFolderU8(sbyte** outPath, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string defaultPath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PickFolderN_With", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result PickFolderWithN(char** outPath, __IntPtr args);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PickFolderU8_With", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result PickFolderWithU8(sbyte** outPath, __IntPtr args);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PickFolderMultipleN", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result PickFolderMultipleN(__IntPtr* outPaths, [MarshalAs(UnmanagedType.LPWStr)] string defaultPath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PickFolderMultipleU8", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result PickFolderMultipleU8(__IntPtr* outPaths, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string defaultPath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PickFolderMultipleN_With", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result PickFolderMultipleWithN(__IntPtr* outPaths, __IntPtr args);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PickFolderMultipleU8_With", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result PickFolderMultipleWithU8(__IntPtr* outPaths, __IntPtr args);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_GetError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetError();

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_ClearError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearError();

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PathSet_GetCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result PathSetGetCount(__IntPtr pathSet, uint* count);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PathSet_GetPathN", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result PathSetGetPathN(__IntPtr pathSet, uint index, char** outPath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PathSet_GetPathU8", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result PathSetGetPathU8(__IntPtr pathSet, uint index, sbyte** outPath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PathSet_FreePathN", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PathSetFreePathN([MarshalAs(UnmanagedType.LPWStr)] string filePath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PathSet_FreePathU8", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PathSetFreePathU8([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filePath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PathSet_GetEnum", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result PathSetGetEnum(__IntPtr pathSet, __IntPtr outEnumerator);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PathSet_FreeEnum", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PathSetFreeEnum(__IntPtr enumerator);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PathSet_EnumNextN", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result PathSetEnumeratorNextN(__IntPtr enumerator, char** outPath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PathSet_EnumNextU8", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NativeFileDialogs.AutoGen.Result PathSetEnumeratorNextU8(__IntPtr enumerator, sbyte** outPath);

            [SuppressUnmanagedCodeSecurity, DllImport("nfd", EntryPoint = "NFD_PathSet_Free", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PathSetFree(__IntPtr pathSet);
        }

        /// <summary>Free a file path that was returned by the dialogs.</summary>
        /// <remarks>Note: use NFD_PathSet_FreePathN() to free path from pathset instead of this function.</remarks>
        [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
        public static void FreePathN(char* filePath)
        {
            __Internal.FreePathN(filePath);
        }

        /// <summary>Free a file path that was returned by the dialogs.</summary>
        /// <remarks>Note: use NFD_PathSet_FreePathU8() to free path from pathset instead of this function.</remarks>
        public static void FreePathU8(sbyte* filePath)
        {
            __Internal.FreePathU8(filePath);
        }

        /// <summary>
        /// <para>Initialize NFD. Call this for every thread that might use NFD, before calling any other NFD</para>
        /// <para>functions on that thread.</para>
        /// </summary>
        public static global::NativeFileDialogs.AutoGen.Result Init()
        {
            var ___ret = __Internal.Init();
            return ___ret;
        }

        /// <summary>Call this to de-initialize NFD, if NFD_Init returned NFD_OKAY.</summary>
        public static void Quit()
        {
            __Internal.Quit();
        }

        /// <summary>Single file open dialog</summary>
        /// <param name="filterCount">If zero, filterList is ignored (you can use null).</param>
        /// <param name="defaultPath">If null, the operating system will decide.</param>
        /// <remarks>
        /// <para>It's the caller's responsibility to free `outPath` via NFD_FreePathN() if this function returns</para>
        /// <para>NFD_OKAY.</para>
        /// </remarks>
        [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
        public static global::NativeFileDialogs.AutoGen.Result OpenDialogN(char** outPath, Span<global::NativeFileDialogs.AutoGen.FilterItemN> filterList, uint filterCount, string defaultPath)
        {
            Span<global::NativeFileDialogs.AutoGen.FilterItemN.__Internal> __filterList;
            if (filterList == null)
                __filterList = null;
            else
            {
                __filterList = new global::NativeFileDialogs.AutoGen.FilterItemN.__Internal[filterList.Length];
                for (int i = 0; i < __filterList.Length; i++)
                {
                    var __element = filterList[i];
                    __filterList[i] = __element is null ? new global::NativeFileDialogs.AutoGen.FilterItemN.__Internal() : *(global::NativeFileDialogs.AutoGen.FilterItemN.__Internal*) __element.__Instance;
                }
            }
            fixed (global::NativeFileDialogs.AutoGen.FilterItemN.__Internal* ____filterList1 = &MemoryMarshal.GetReference(__filterList))
            {
                var __arg1 = ____filterList1;
                var ___ret = __Internal.OpenDialogN(outPath, __arg1, filterCount, defaultPath);
                return ___ret;
            }
        }

        /// <summary>Single file open dialog</summary>
        /// <param name="filterCount">If zero, filterList is ignored (you can use null).</param>
        /// <param name="defaultPath">If null, the operating system will decide.</param>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPath` via NFD_FreePathU8() if this function</para>
        /// <para>returns NFD_OKAY.</para>
        /// </remarks>
        public static global::NativeFileDialogs.AutoGen.Result OpenDialogU8(sbyte** outPath, Span<global::NativeFileDialogs.AutoGen.FilterItemU8> filterList, uint filterCount, string defaultPath)
        {
            Span<global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal> __filterList;
            if (filterList == null)
                __filterList = null;
            else
            {
                __filterList = new global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal[filterList.Length];
                for (int i = 0; i < __filterList.Length; i++)
                {
                    var __element = filterList[i];
                    __filterList[i] = __element is null ? new global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal() : *(global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal*) __element.__Instance;
                }
            }
            fixed (global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal* ____filterList1 = &MemoryMarshal.GetReference(__filterList))
            {
                var __arg1 = ____filterList1;
                var ___ret = __Internal.OpenDialogU8(outPath, __arg1, filterCount, defaultPath);
                return ___ret;
            }
        }

        /// <summary>Single file open dialog, with additional parameters.</summary>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPath` via NFD_FreePathN() if this function</para>
        /// <para>returns NFD_OKAY.  See documentation of nfdopendialognargs_t for details.</para>
        /// </remarks>
        [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
        public static global::NativeFileDialogs.AutoGen.Result OpenDialogWithN(char** outPath, global::NativeFileDialogs.AutoGen.OpenDialogArgsN args)
        {
            var __arg1 = args is null ? __IntPtr.Zero : args.__Instance;
            var ___ret = __Internal.OpenDialogWithN(outPath, __arg1);
            return ___ret;
        }

        /// <summary>Single file open dialog, with additional parameters.</summary>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPath` via NFD_FreePathU8() if this function</para>
        /// <para>returns NFD_OKAY.  See documentation of nfdopendialogu8args_t for details.</para>
        /// </remarks>
        public static global::NativeFileDialogs.AutoGen.Result OpenDialogWithU8(sbyte** outPath, global::NativeFileDialogs.AutoGen.OpenDialogArgsU8 args)
        {
            var __arg1 = args is null ? __IntPtr.Zero : args.__Instance;
            var ___ret = __Internal.OpenDialogWithU8(outPath, __arg1);
            return ___ret;
        }

        /// <summary>Multiple file open dialog</summary>
        /// <param name="filterCount">If zero, filterList is ignored (you can use null).</param>
        /// <param name="defaultPath">If null, the operating system will decide.</param>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPaths` via NFD_PathSet_FreeN() if this function</para>
        /// <para>returns NFD_OKAY.</para>
        /// </remarks>
        [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
        public static global::NativeFileDialogs.AutoGen.Result OpenDialogMultipleN(__IntPtr* outPaths, Span<global::NativeFileDialogs.AutoGen.FilterItemN> filterList, uint filterCount, string defaultPath)
        {
            Span<global::NativeFileDialogs.AutoGen.FilterItemN.__Internal> __filterList;
            if (filterList == null)
                __filterList = null;
            else
            {
                __filterList = new global::NativeFileDialogs.AutoGen.FilterItemN.__Internal[filterList.Length];
                for (int i = 0; i < __filterList.Length; i++)
                {
                    var __element = filterList[i];
                    __filterList[i] = __element is null ? new global::NativeFileDialogs.AutoGen.FilterItemN.__Internal() : *(global::NativeFileDialogs.AutoGen.FilterItemN.__Internal*) __element.__Instance;
                }
            }
            fixed (global::NativeFileDialogs.AutoGen.FilterItemN.__Internal* ____filterList1 = &MemoryMarshal.GetReference(__filterList))
            {
                var __arg1 = ____filterList1;
                var ___ret = __Internal.OpenDialogMultipleN(outPaths, __arg1, filterCount, defaultPath);
                return ___ret;
            }
        }

        /// <summary>Multiple file open dialog</summary>
        /// <param name="filterCount">If zero, filterList is ignored (you can use null).</param>
        /// <param name="defaultPath">If null, the operating system will decide.</param>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPaths` via NFD_PathSet_FreeU8() if this function</para>
        /// <para>returns NFD_OKAY.</para>
        /// </remarks>
        public static global::NativeFileDialogs.AutoGen.Result OpenDialogMultipleU8(__IntPtr* outPaths, Span<global::NativeFileDialogs.AutoGen.FilterItemU8> filterList, uint filterCount, string defaultPath)
        {
            Span<global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal> __filterList;
            if (filterList == null)
                __filterList = null;
            else
            {
                __filterList = new global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal[filterList.Length];
                for (int i = 0; i < __filterList.Length; i++)
                {
                    var __element = filterList[i];
                    __filterList[i] = __element is null ? new global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal() : *(global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal*) __element.__Instance;
                }
            }
            fixed (global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal* ____filterList1 = &MemoryMarshal.GetReference(__filterList))
            {
                var __arg1 = ____filterList1;
                var ___ret = __Internal.OpenDialogMultipleU8(outPaths, __arg1, filterCount, defaultPath);
                return ___ret;
            }
        }

        /// <summary>Multiple file open dialog, with additional parameters.</summary>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPaths` via NFD_PathSet_FreeN() if this function</para>
        /// <para>returns NFD_OKAY.  See documentation of nfdopendialognargs_t for details.</para>
        /// </remarks>
        [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
        public static global::NativeFileDialogs.AutoGen.Result OpenDialogMultipleWithN(__IntPtr* outPaths, global::NativeFileDialogs.AutoGen.OpenDialogArgsN args)
        {
            var __arg1 = args is null ? __IntPtr.Zero : args.__Instance;
            var ___ret = __Internal.OpenDialogMultipleWithN(outPaths, __arg1);
            return ___ret;
        }

        /// <summary>Multiple file open dialog, with additional parameters.</summary>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPaths` via NFD_PathSet_FreeU8() if this function</para>
        /// <para>returns NFD_OKAY.  See documentation of nfdopendialogu8args_t for details.</para>
        /// </remarks>
        public static global::NativeFileDialogs.AutoGen.Result OpenDialogMultipleWithU8(__IntPtr* outPaths, global::NativeFileDialogs.AutoGen.OpenDialogArgsU8 args)
        {
            var __arg1 = args is null ? __IntPtr.Zero : args.__Instance;
            var ___ret = __Internal.OpenDialogMultipleWithU8(outPaths, __arg1);
            return ___ret;
        }

        /// <summary>Save dialog</summary>
        /// <param name="filterCount">If zero, filterList is ignored (you can use null).</param>
        /// <param name="defaultPath">If null, the operating system will decide.</param>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPath` via NFD_FreePathN() if this function returns</para>
        /// <para>NFD_OKAY.</para>
        /// </remarks>
        [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
        public static global::NativeFileDialogs.AutoGen.Result SaveDialogN(char** outPath, Span<global::NativeFileDialogs.AutoGen.FilterItemN> filterList, uint filterCount, string defaultPath, string defaultName)
        {
            Span<global::NativeFileDialogs.AutoGen.FilterItemN.__Internal> __filterList;
            if (filterList == null)
                __filterList = null;
            else
            {
                __filterList = new global::NativeFileDialogs.AutoGen.FilterItemN.__Internal[filterList.Length];
                for (int i = 0; i < __filterList.Length; i++)
                {
                    var __element = filterList[i];
                    __filterList[i] = __element is null ? new global::NativeFileDialogs.AutoGen.FilterItemN.__Internal() : *(global::NativeFileDialogs.AutoGen.FilterItemN.__Internal*) __element.__Instance;
                }
            }
            fixed (global::NativeFileDialogs.AutoGen.FilterItemN.__Internal* ____filterList1 = &MemoryMarshal.GetReference(__filterList))
            {
                var __arg1 = ____filterList1;
                var ___ret = __Internal.SaveDialogN(outPath, __arg1, filterCount, defaultPath, defaultName);
                return ___ret;
            }
        }

        /// <summary>Save dialog</summary>
        /// <param name="filterCount">If zero, filterList is ignored (you can use null).</param>
        /// <param name="defaultPath">If null, the operating system will decide.</param>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPath` via NFD_FreePathU8() if this function</para>
        /// <para>returns NFD_OKAY.</para>
        /// </remarks>
        public static global::NativeFileDialogs.AutoGen.Result SaveDialogU8(sbyte** outPath, Span<global::NativeFileDialogs.AutoGen.FilterItemU8> filterList, uint filterCount, string defaultPath, string defaultName)
        {
            Span<global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal> __filterList;
            if (filterList == null)
                __filterList = null;
            else
            {
                __filterList = new global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal[filterList.Length];
                for (int i = 0; i < __filterList.Length; i++)
                {
                    var __element = filterList[i];
                    __filterList[i] = __element is null ? new global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal() : *(global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal*) __element.__Instance;
                }
            }
            fixed (global::NativeFileDialogs.AutoGen.FilterItemU8.__Internal* ____filterList1 = &MemoryMarshal.GetReference(__filterList))
            {
                var __arg1 = ____filterList1;
                var ___ret = __Internal.SaveDialogU8(outPath, __arg1, filterCount, defaultPath, defaultName);
                return ___ret;
            }
        }

        /// <summary>Single file save dialog, with additional parameters.</summary>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPath` via NFD_FreePathN() if this function</para>
        /// <para>returns NFD_OKAY.  See documentation of nfdsavedialognargs_t for details.</para>
        /// </remarks>
        [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
        public static global::NativeFileDialogs.AutoGen.Result SaveDialogWithN(char** outPath, global::NativeFileDialogs.AutoGen.SaveDialogArgsN args)
        {
            var __arg1 = args is null ? __IntPtr.Zero : args.__Instance;
            var ___ret = __Internal.SaveDialogWithN(outPath, __arg1);
            return ___ret;
        }

        /// <summary>Single file save dialog, with additional parameters.</summary>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPath` via NFD_FreePathU8() if this function</para>
        /// <para>returns NFD_OKAY.  See documentation of nfdsavedialogu8args_t for details.</para>
        /// </remarks>
        public static global::NativeFileDialogs.AutoGen.Result SaveDialogWithU8(sbyte** outPath, global::NativeFileDialogs.AutoGen.SaveDialogArgsU8 args)
        {
            var __arg1 = args is null ? __IntPtr.Zero : args.__Instance;
            var ___ret = __Internal.SaveDialogWithU8(outPath, __arg1);
            return ___ret;
        }

        /// <summary>Select single folder dialog</summary>
        /// <param name="defaultPath">If null, the operating system will decide.</param>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPath` via NFD_FreePathN() if this function returns</para>
        /// <para>NFD_OKAY.</para>
        /// </remarks>
        [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
        public static global::NativeFileDialogs.AutoGen.Result PickFolderN(char** outPath, string defaultPath)
        {
            var ___ret = __Internal.PickFolderN(outPath, defaultPath);
            return ___ret;
        }

        /// <summary>Select single folder dialog</summary>
        /// <param name="defaultPath">If null, the operating system will decide.</param>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPath` via NFD_FreePathU8() if this function</para>
        /// <para>returns NFD_OKAY.</para>
        /// </remarks>
        public static global::NativeFileDialogs.AutoGen.Result PickFolderU8(sbyte** outPath, string defaultPath)
        {
            var ___ret = __Internal.PickFolderU8(outPath, defaultPath);
            return ___ret;
        }

        /// <summary>Select single folder dialog, with additional parameters.</summary>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPath` via NFD_FreePathN() if this function</para>
        /// <para>returns NFD_OKAY.  See documentation of nfdpickfoldernargs_t for details.</para>
        /// </remarks>
        [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
        public static global::NativeFileDialogs.AutoGen.Result PickFolderWithN(char** outPath, global::NativeFileDialogs.AutoGen.PickFolderArgsN args)
        {
            var __arg1 = args is null ? __IntPtr.Zero : args.__Instance;
            var ___ret = __Internal.PickFolderWithN(outPath, __arg1);
            return ___ret;
        }

        /// <summary>Select single folder dialog, with additional parameters.</summary>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPath` via NFD_FreePathU8() if this function</para>
        /// <para>returns NFD_OKAY.  See documentation of nfdpickfolderu8args_t for details.</para>
        /// </remarks>
        public static global::NativeFileDialogs.AutoGen.Result PickFolderWithU8(sbyte** outPath, global::NativeFileDialogs.AutoGen.PickFolderArgsU8 args)
        {
            var __arg1 = args is null ? __IntPtr.Zero : args.__Instance;
            var ___ret = __Internal.PickFolderWithU8(outPath, __arg1);
            return ___ret;
        }

        /// <summary>Select multiple folder dialog</summary>
        /// <param name="defaultPath">If null, the operating system will decide.</param>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPaths` via NFD_PathSet_FreeN() if this function</para>
        /// <para>returns NFD_OKAY.</para>
        /// </remarks>
        [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
        public static global::NativeFileDialogs.AutoGen.Result PickFolderMultipleN(__IntPtr* outPaths, string defaultPath)
        {
            var ___ret = __Internal.PickFolderMultipleN(outPaths, defaultPath);
            return ___ret;
        }

        /// <summary>Select multiple folder dialog</summary>
        /// <param name="defaultPath">If null, the operating system will decide.</param>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPaths` via NFD_PathSet_FreeU8() if this function</para>
        /// <para>returns NFD_OKAY.</para>
        /// </remarks>
        public static global::NativeFileDialogs.AutoGen.Result PickFolderMultipleU8(__IntPtr* outPaths, string defaultPath)
        {
            var ___ret = __Internal.PickFolderMultipleU8(outPaths, defaultPath);
            return ___ret;
        }

        /// <summary>Select multiple folder dialog, with additional parameters.</summary>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPaths` via NFD_PathSet_FreeN() if this function</para>
        /// <para>returns NFD_OKAY.  See documentation of nfdopendialogargs_t for details.</para>
        /// </remarks>
        [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
        public static global::NativeFileDialogs.AutoGen.Result PickFolderMultipleWithN(__IntPtr* outPaths, global::NativeFileDialogs.AutoGen.PickFolderArgsN args)
        {
            var __arg1 = args is null ? __IntPtr.Zero : args.__Instance;
            var ___ret = __Internal.PickFolderMultipleWithN(outPaths, __arg1);
            return ___ret;
        }

        /// <summary>Select multiple folder dialog, with additional parameters.</summary>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPaths` via NFD_PathSet_FreeU8() if this function</para>
        /// <para>returns NFD_OKAY.  See documentation of nfdpickfolderargs_t for details.</para>
        /// </remarks>
        public static global::NativeFileDialogs.AutoGen.Result PickFolderMultipleWithU8(__IntPtr* outPaths, global::NativeFileDialogs.AutoGen.PickFolderArgsU8 args)
        {
            var __arg1 = args is null ? __IntPtr.Zero : args.__Instance;
            var ___ret = __Internal.PickFolderMultipleWithU8(outPaths, __arg1);
            return ___ret;
        }

        /// <summary>Get the last error</summary>
        /// <returns>The last error that was set, or null if there is no error.</returns>
        /// <remarks>
        /// <para>This is set when a function returns NFD_ERROR.</para>
        /// <para>The memory is owned by NFD and should not be freed by user code.</para>
        /// <para>This is *always* ASCII printable characters, so it can be interpreted as UTF-8 without any</para>
        /// <para>conversion.</para>
        /// </remarks>
        public static string GetError()
        {
            var ___ret = __Internal.GetError();
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        /// <summary>Clear the error.</summary>
        public static void ClearError()
        {
            __Internal.ClearError();
        }

        /// <summary>Get the number of entries stored in pathSet.</summary>
        /// <remarks>
        /// <para>Note: some paths might be invalid (NFD_ERROR will be returned by NFD_PathSet_GetPath),</para>
        /// <para>so we might not actually have this number of usable paths.</para>
        /// </remarks>
        public static global::NativeFileDialogs.AutoGen.Result PathSetGetCount(__IntPtr pathSet, ref uint count)
        {
            fixed (uint* __count1 = &count)
            {
                var __arg1 = __count1;
                var ___ret = __Internal.PathSetGetCount(pathSet, __arg1);
                return ___ret;
            }
        }

        /// <summary>Get the UTF-8 path at offset index.</summary>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPath` via NFD_PathSet_FreePathN() if this function</para>
        /// <para>returns NFD_OKAY.</para>
        /// </remarks>
        [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
        public static global::NativeFileDialogs.AutoGen.Result PathSetGetPathN(__IntPtr pathSet, uint index, char** outPath)
        {
            var ___ret = __Internal.PathSetGetPathN(pathSet, index, outPath);
            return ___ret;
        }

        /// <summary>Get the native path at offset index.</summary>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `outPath` via NFD_PathSet_FreePathU8() if this</para>
        /// <para>function returns NFD_OKAY.</para>
        /// </remarks>
        public static global::NativeFileDialogs.AutoGen.Result PathSetGetPathU8(__IntPtr pathSet, uint index, sbyte** outPath)
        {
            var ___ret = __Internal.PathSetGetPathU8(pathSet, index, outPath);
            return ___ret;
        }

        /// <summary>Free the path gotten by NFD_PathSet_GetPathN().</summary>
        [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
        public static void PathSetFreePathN(string filePath)
        {
            __Internal.PathSetFreePathN(filePath);
        }

        /// <summary>Free the path gotten by NFD_PathSet_GetPathU8().</summary>
        public static void PathSetFreePathU8(string filePath)
        {
            __Internal.PathSetFreePathU8(filePath);
        }

        /// <summary>Gets an enumerator of the path set.</summary>
        /// <remarks>
        /// <para>It is the caller's responsibility to free `enumerator` via NFD_PathSet_FreeEnum()</para>
        /// <para>if this function returns NFD_OKAY, and it should be freed before freeing the pathset.</para>
        /// </remarks>
        public static global::NativeFileDialogs.AutoGen.Result PathSetGetEnum(__IntPtr pathSet, global::NativeFileDialogs.AutoGen.PathSetEnumerator outEnumerator)
        {
            var __arg1 = outEnumerator is null ? __IntPtr.Zero : outEnumerator.__Instance;
            var ___ret = __Internal.PathSetGetEnum(pathSet, __arg1);
            return ___ret;
        }

        /// <summary>Frees an enumerator of the path set.</summary>
        public static void PathSetFreeEnum(global::NativeFileDialogs.AutoGen.PathSetEnumerator enumerator)
        {
            var __arg0 = enumerator is null ? __IntPtr.Zero : enumerator.__Instance;
            __Internal.PathSetFreeEnum(__arg0);
        }

        /// <summary>Gets the next item from the path set enumerator.</summary>
        /// <remarks>
        /// <para>If there are no more items, then *outPaths will be set to null.</para>
        /// <para>It is the caller's responsibility to free `*outPath` via NFD_PathSet_FreePathN()</para>
        /// <para>if this function returns NFD_OKAY and `*outPath` is not null.</para>
        /// </remarks>
        [global::System.Runtime.Versioning.SupportedOSPlatformAttribute("windows")]
        public static global::NativeFileDialogs.AutoGen.Result PathSetEnumeratorNextN(global::NativeFileDialogs.AutoGen.PathSetEnumerator enumerator, char** outPath)
        {
            var __arg0 = enumerator is null ? __IntPtr.Zero : enumerator.__Instance;
            var ___ret = __Internal.PathSetEnumeratorNextN(__arg0, outPath);
            return ___ret;
        }

        /// <summary>Gets the next item from the path set enumerator.</summary>
        /// <remarks>
        /// <para>If there are no more items, then *outPaths will be set to null.</para>
        /// <para>It is the caller's responsibility to free `*outPath` via NFD_PathSet_FreePathU8()</para>
        /// <para>if this function returns NFD_OKAY and `*outPath` is not null.</para>
        /// </remarks>
        public static global::NativeFileDialogs.AutoGen.Result PathSetEnumeratorNextU8(global::NativeFileDialogs.AutoGen.PathSetEnumerator enumerator, sbyte** outPath)
        {
            var __arg0 = enumerator is null ? __IntPtr.Zero : enumerator.__Instance;
            var ___ret = __Internal.PathSetEnumeratorNextU8(__arg0, outPath);
            return ___ret;
        }

        /// <summary>Free the pathSet</summary>
        public static void PathSetFree(__IntPtr pathSet)
        {
            __Internal.PathSetFree(pathSet);
        }
    }
}
